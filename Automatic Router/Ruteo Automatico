{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Ruteo Automatico","provenance":[],"authorship_tag":"ABX9TyPtckoE+p04f93kgwf0b4xm"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"IVBI8ldaAZSY"},"source":["# Clustering\n","\n","**Mejora posible:**\n","En vez de usar K-Means usar Density Clustering"]},{"cell_type":"markdown","metadata":{"id":"HT2-5o6NEJBF"},"source":["Mapa de zonas: https://www.google.com/maps/d/u/1/edit?mid=1s1WAqnnLwZw1Le2SYiBtj6jvAlGzshXA&ll=-34.60127437342429%2C-58.74003364250894&z=10"]},{"cell_type":"markdown","metadata":{"id":"4Rd_hUrvAfSR"},"source":["## Librerias Necesarias"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"W1PM8dpVc9jP","executionInfo":{"status":"ok","timestamp":1639767260194,"user_tz":180,"elapsed":79584,"user":{"displayName":"Pedro Vallarino","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gixieh-Unl_nq3d74imh4GgNpZYMaYy-NqMohr4=s64","userId":"15125725779083024235"}},"outputId":"982d0a66-b772-4fb4-d5d7-d76b1125c7be"},"source":["# Nose porque siempre falla la primera vez que instalo k_means_constrained\n","!pip install k_means_constrained"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting k_means_constrained\n","  Downloading k-means-constrained-0.6.0.tar.gz (557 kB)\n","\u001b[?25l\r\u001b[K     |▋                               | 10 kB 14.9 MB/s eta 0:00:01\r\u001b[K     |█▏                              | 20 kB 16.5 MB/s eta 0:00:01\r\u001b[K     |█▊                              | 30 kB 17.9 MB/s eta 0:00:01\r\u001b[K     |██▍                             | 40 kB 19.2 MB/s eta 0:00:01\r\u001b[K     |███                             | 51 kB 20.5 MB/s eta 0:00:01\r\u001b[K     |███▌                            | 61 kB 19.9 MB/s eta 0:00:01\r\u001b[K     |████▏                           | 71 kB 20.8 MB/s eta 0:00:01\r\u001b[K     |████▊                           | 81 kB 21.8 MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 92 kB 22.9 MB/s eta 0:00:01\r\u001b[K     |█████▉                          | 102 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |██████▌                         | 112 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |███████                         | 122 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |███████▋                        | 133 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |████████▎                       | 143 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |████████▉                       | 153 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |█████████▍                      | 163 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |██████████                      | 174 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |██████████▋                     | 184 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |███████████▏                    | 194 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |███████████▊                    | 204 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |████████████▍                   | 215 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 225 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |█████████████▌                  | 235 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 245 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |██████████████▊                 | 256 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |███████████████▎                | 266 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |███████████████▉                | 276 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |████████████████▌               | 286 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |█████████████████               | 296 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |█████████████████▋              | 307 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |██████████████████▏             | 317 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |██████████████████▉             | 327 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |███████████████████▍            | 337 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |████████████████████            | 348 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |████████████████████▋           | 358 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▏          | 368 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▊          | 378 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▎         | 389 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 399 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▌        | 409 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 419 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▊       | 430 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▎      | 440 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▉      | 450 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▌     | 460 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████     | 471 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▋    | 481 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▏   | 491 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▉   | 501 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▍  | 512 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████  | 522 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▋ | 532 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▏| 542 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▊| 552 kB 22.8 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 557 kB 22.8 MB/s \n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n","Collecting scipy>=1.6.3\n","  Downloading scipy-1.7.3-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (38.1 MB)\n","\u001b[K     |████████████████████████████████| 38.1 MB 1.3 MB/s \n","\u001b[?25hCollecting ortools>=9.0.9048\n","  Downloading ortools-9.2.9972-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (14.6 MB)\n","\u001b[K     |████████████████████████████████| 14.6 MB 46.7 MB/s \n","\u001b[?25hRequirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from k_means_constrained) (1.15.0)\n","Collecting numpy>=1.20.3\n","  Using cached numpy-1.21.4-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (15.7 MB)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from k_means_constrained) (1.1.0)\n","Collecting protobuf>=3.19.1\n","  Downloading protobuf-3.19.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.1 MB)\n","\u001b[K     |████████████████████████████████| 1.1 MB 41.5 MB/s \n","\u001b[?25hCollecting absl-py>=0.13\n","  Downloading absl_py-1.0.0-py3-none-any.whl (126 kB)\n","\u001b[K     |████████████████████████████████| 126 kB 40.7 MB/s \n","\u001b[?25hBuilding wheels for collected packages: k-means-constrained\n","  Building wheel for k-means-constrained (PEP 517) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for k-means-constrained: filename=k_means_constrained-0.6.0-cp37-cp37m-linux_x86_64.whl size=1410473 sha256=e9eaa4dc58a1f5db29239b33764d54b70bb9030e79bfd20fa3daa3bca5200be3\n","  Stored in directory: /root/.cache/pip/wheels/c1/71/49/3c504743f39dc4f94af42a1f4fa1ea8a9709c35101402bcd4f\n","Successfully built k-means-constrained\n","Installing collected packages: protobuf, numpy, absl-py, scipy, ortools, k-means-constrained\n","  Attempting uninstall: protobuf\n","    Found existing installation: protobuf 3.17.3\n","    Uninstalling protobuf-3.17.3:\n","      Successfully uninstalled protobuf-3.17.3\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 1.19.5\n","    Uninstalling numpy-1.19.5:\n","      Successfully uninstalled numpy-1.19.5\n","  Attempting uninstall: absl-py\n","    Found existing installation: absl-py 0.12.0\n","    Uninstalling absl-py-0.12.0:\n","      Successfully uninstalled absl-py-0.12.0\n","  Attempting uninstall: scipy\n","    Found existing installation: scipy 1.4.1\n","    Uninstalling scipy-1.4.1:\n","      Successfully uninstalled scipy-1.4.1\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","yellowbrick 1.3.post1 requires numpy<1.20,>=1.16.0, but you have numpy 1.21.4 which is incompatible.\n","tensorflow-metadata 1.4.0 requires absl-py<0.13,>=0.9, but you have absl-py 1.0.0 which is incompatible.\n","datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible.\n","albumentations 0.1.12 requires imgaug<0.2.7,>=0.2.5, but you have imgaug 0.2.9 which is incompatible.\u001b[0m\n","Successfully installed absl-py-1.0.0 k-means-constrained-0.6.0 numpy-1.21.4 ortools-9.2.9972 protobuf-3.19.1 scipy-1.7.3\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["google","numpy"]}}},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6bOgc-Hvin38","executionInfo":{"status":"ok","timestamp":1637172318237,"user_tz":180,"elapsed":6230,"user":{"displayName":"Pedro Vallarino","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15125725779083024235"}},"outputId":"04eddc8c-6ce0-413e-ce74-01ad493a27fc"},"source":["!pip install ortools\n","!pip install k_means_constrained"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: ortools in /usr/local/lib/python3.7/dist-packages (9.1.9490)\n","Requirement already satisfied: absl-py>=0.13 in /usr/local/lib/python3.7/dist-packages (from ortools) (1.0.0)\n","Requirement already satisfied: protobuf>=3.18.0 in /usr/local/lib/python3.7/dist-packages (from ortools) (3.19.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from absl-py>=0.13->ortools) (1.15.0)\n","Requirement already satisfied: k_means_constrained in /usr/local/lib/python3.7/dist-packages (0.6.0)\n","Requirement already satisfied: numpy>=1.20.3 in /usr/local/lib/python3.7/dist-packages (from k_means_constrained) (1.21.4)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from k_means_constrained) (1.15.0)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from k_means_constrained) (1.1.0)\n","Requirement already satisfied: ortools>=9.0.9048 in /usr/local/lib/python3.7/dist-packages (from k_means_constrained) (9.1.9490)\n","Requirement already satisfied: scipy>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from k_means_constrained) (1.7.2)\n","Requirement already satisfied: absl-py>=0.13 in /usr/local/lib/python3.7/dist-packages (from ortools>=9.0.9048->k_means_constrained) (1.0.0)\n","Requirement already satisfied: protobuf>=3.18.0 in /usr/local/lib/python3.7/dist-packages (from ortools>=9.0.9048->k_means_constrained) (3.19.1)\n"]}]},{"cell_type":"code","metadata":{"id":"v4ee9lXO-6R3"},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","from sklearn.cluster import KMeans\n","from sklearn import metrics\n","\n","import seaborn as sns; sns.set()\n","import csv\n","\n","from scipy.spatial.distance import cdist\n","\n","import math\n","\n","from k_means_constrained import KMeansConstrained\n","\n","from ortools.constraint_solver import routing_enums_pb2\n","from ortools.constraint_solver import pywrapcp\n","from ortools.linear_solver import pywraplp\n","import geopy.distance\n","import statistics\n","\n","import pdb"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RSSDYMNQAjVZ"},"source":["## Importando .csv de query de SQL"]},{"cell_type":"code","metadata":{"id":"b2_Ei0fxvOFe","colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1637175470151,"user_tz":180,"elapsed":5988,"user":{"displayName":"Pedro Vallarino","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15125725779083024235"}},"outputId":"11968870-8049-4191-a3eb-9a6828d51ca3"},"source":["from google.colab import files\n","uploaded = files.upload()\n","# df = pd.read_csv('Puntos de prueba.csv')\n","df = pd.read_csv('Puntos de prueba_500.csv')\n","# df = pd.read_csv('Puntos de prueba_300.csv')\n","# df = pd.read_csv('Puntos de prueba_250.csv')\n","# df = pd.read_csv('Puntos de prueba_210.csv')\n","# df = pd.read_csv('Puntos de prueba_180.csv')\n","# df = pd.read_csv('Puntos de prueba_181.csv')\n","# df = pd.read_csv('Puntos de prueba_150.csv')\n","# df = pd.read_csv('Puntos de prueba_151.csv')\n","# df = pd.read_csv('Puntos de prueba_120.csv')\n","# df = pd.read_csv('Puntos de prueba_121.csv')\n","# df = pd.read_csv('Puntos de prueba_90.csv')\n","# df = pd.read_csv('Puntos de prueba_91.csv')\n","# df = pd.read_csv('Puntos de prueba_60.csv')\n","# df = pd.read_csv('Puntos de prueba_61.csv')\n","# df = pd.read_csv('Puntos de prueba_30.csv')\n","# df = pd.read_csv('Puntos de prueba_31.csv')\n","# df = pd.read_csv('Puntos de prueba_29.csv')\n","\n","df = df.loc[:,['lon','lat','type']]\n","\n","Matrix = df[df.columns[0:2]]"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-2907dc8c-a8a2-4427-b959-dc0241c142fe\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-2907dc8c-a8a2-4427-b959-dc0241c142fe\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving Puntos de prueba_500.csv to Puntos de prueba_500.csv\n"]}]},{"cell_type":"markdown","metadata":{"id":"4t3ZOmGY-OU8"},"source":["## Funciones: Posibles clusters globales"]},{"cell_type":"code","metadata":{"id":"2I3LzEolqcKp"},"source":["def posibles_cantidades_clusters_globales(Matriz_puntos_a_clusterizar):\n","  \n","  cantidad_globales = 5\n","  inertias = []\n","  N_Clusters = []\n","  all_labels = []\n","\n","  try:\n","    for k in range(2,21):\n","\n","      kmeanModel = KMeansConstrained(n_clusters=k, size_min=30,init ='k-means++')\n","      kmeanModel.fit(Matrix)\n","\n","      inertias.append(kmeanModel.inertia_)\n","      N_Clusters.append(k)\n","      all_labels.append(kmeanModel.labels_)\n","\n","  except: # Si se sigue por la linea del except es porque se estan usando cantidades menores a 600 puntos\n","          # que no permiten hacerles el analisis de intercia de 18 clusters globales por lo que se aplica \n","          # un metodo distinto usando como limite maximo su mayor division sobre 30 (minima cantidad de \n","          # puntos para una ruta) \n","    \n","    inertias = []\n","    N_Clusters = []\n","    all_labels = []\n","\n","    for k in range(2, (len(Matrix)//30) + 1):\n","\n","      kmeanModel = KMeansConstrained(n_clusters=k, size_min=30,init ='k-means++')\n","      kmeanModel.fit(Matrix)\n","\n","      inertias.append(kmeanModel.inertia_)\n","      N_Clusters.append(k)\n","      all_labels.append(kmeanModel.labels_)\n","\n","  inertias = inertias/np.linalg.norm(inertias)\n"," \n","  data = {'N_Clusters': N_Clusters, 'Inertias': inertias } \n","\n","  Matriz_KMeans = pd.DataFrame(data)     \n","  Matriz_KMeans.reset_index(inplace=True)\n","  Matriz_KMeans.Inertias = Matriz_KMeans.Inertias - min(Matriz_KMeans.Inertias) \n","\n","  return Matriz_KMeans"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2YvspLXuBNPm"},"source":["## Posibles clusters globales"]},{"cell_type":"code","metadata":{"id":"4AIRmle3ZV3G"},"source":["Matriz_Kmeans = posibles_cantidades_clusters_globales(Matriz_puntos_a_clusterizar = Matrix)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GnEJYT8XBRUC"},"source":["## Funciones: Finales Clusters Globales "]},{"cell_type":"code","metadata":{"id":"deoZB-miSwW1"},"source":["def niveles_inercia (lvl):   # Los lvl's van de 1 a 10 cuanto mas alto el nivel, cuanto mas\n","                               # alto exige una menor inercia \n","  if lvl == 1:\n","    tolerancia_inercia = 0.08 \n","  elif lvl == 2:\n","    tolerancia_inercia = 0.075\n","  elif lvl == 3:\n","    tolerancia_inercia = 0.07\n","  elif lvl == 4:\n","    tolerancia_inercia = 0.065\n","  elif lvl == 5:\n","    tolerancia_inercia = 0.06\n","  elif lvl == 6:\n","    tolerancia_inercia = 0.055\n","  elif lvl == 7:\n","    tolerancia_inercia = 0.05\n","  elif lvl == 8:\n","    tolerancia_inercia = 0.045\n","  elif lvl == 9:\n","    tolerancia_inercia = 0.04\n","  elif lvl == 10:\n","    tolerancia_inercia = 0.035\n","  else:\n","    tolerancia_inercia = \"Los niveles van de 1 a 10, solo se aceptan numeros enteros\"\n","\n","  return tolerancia_inercia\n","  \n","def optima_cantidad_clusters_globales(Matriz_inercias_globales,nivel_inercia,cantidad_globales):\n","\n","  # Variables que se van a usar\n","  error_state = False\n","  valid_numbers_GD = []\n","  n_cluster_GD     = []\n","  index_correspondiente = []\n","  inercia_limite = niveles_inercia(nivel_inercia)\n","\n","  # Dependiendo de la longitud del dataset \n","  if len(Matriz_inercias_globales) > cantidad_globales:\n","    \n","    for number in range(0,len(Matriz_inercias_globales)):\n","\n","      if number == (len(Matriz_inercias_globales) - len(valid_numbers_GD) - cantidad_globales) or len(valid_numbers_GD) == cantidad_globales: \n","      \n","        if number == (len(Matriz_inercias_globales) - len(valid_numbers_GD) - cantidad_globales):\n","      \n","          for remaining_numbers in range(number,number + cantidad_globales - len(valid_numbers_GD)):\n","          \n","            valid_numbers_GD.append(Matriz_inercias_globales.loc[Matriz_inercias_globales[\"index\"] == remaining_numbers, \"Inertias\"].iloc[0])\n","            n_cluster_GD.append(Matriz_inercias_globales.loc[Matriz_inercias_globales[\"index\"] == remaining_numbers, \"N_Clusters\"].iloc[0])\n","            index_correspondiente.append(Matriz_inercias_globales.loc[Matriz_inercias_globales[\"index\"] == remaining_numbers, \"index\"].iloc[0])\n","\n","          break\n","\n","        elif len(valid_numbers_GD) == cantidad_globales:\n","\n","          break\n","\n","        break\n","      \n","      elif number != len(Matriz_inercias_globales)- len(valid_numbers_GD) - cantidad_globales and Matriz_inercias_globales.Inertias[number] <= inercia_limite :\n","      \n","        valid_numbers_GD.append(Matriz_inercias_globales.loc[Matriz_inercias_globales[\"index\"] == number, \"Inertias\"].iloc[0])\n","        n_cluster_GD.append(Matriz_inercias_globales.loc[Matriz_inercias_globales[\"index\"] == number, \"N_Clusters\"].iloc[0])\n","        index_correspondiente.append(Matriz_inercias_globales.loc[Matriz_inercias_globales[\"index\"] == number, \"index\"].iloc[0])\n","      \n","    matriz_optimo_n_cluster_GD = pd.DataFrame({'index': index_correspondiente, 'N_Clusters': n_cluster_GD, 'Inertias': valid_numbers_GD}) \n","\n","    n_optimo_clusters = matriz_optimo_n_cluster_GD.N_Clusters\n","    n_correspondiente_index = matriz_optimo_n_cluster_GD['index']\n","\n","  elif len(Matriz_inercias_globales) < 1:\n","    error_state = True\n","\n","  elif len(Matriz_inercias_globales) <= cantidad_globales:\n","    cantidad_globales = cantidad_globales - (cantidad_globales - len(Matriz_inercias_globales) )\n","    matriz_optimo_n_cluster_GD = Matriz_inercias_globales \n","    n_optimo_clusters = matriz_optimo_n_cluster_GD.N_Clusters\n","    n_correspondiente_index = matriz_optimo_n_cluster_GD.index\n","  \n","  return error_state,matriz_optimo_n_cluster_GD,cantidad_globales, n_optimo_clusters, n_correspondiente_index"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ALsEyomlBcpS"},"source":["## Finales Clusters Globales"]},{"cell_type":"code","metadata":{"id":"IoP76u9xh2o7"},"source":["funcion_optima_cantidad_clusters_globales = optima_cantidad_clusters_globales(\n","    Matriz_inercias_globales = Matriz_Kmeans ,\n","    nivel_inercia = 5,\n","    cantidad_globales = 4\n","                                  )\n","\n","error_state =                funcion_optima_cantidad_clusters_globales [0]\n","matriz_optimo_n_cluster_GD = funcion_optima_cantidad_clusters_globales [1]\n","cantidad_globales =          funcion_optima_cantidad_clusters_globales [2]\n","n_optimo_clusters =          funcion_optima_cantidad_clusters_globales [3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ku0z69s5_C39"},"source":["## Funciones: Matriz Final"]},{"cell_type":"code","metadata":{"id":"IrXMG0jSD0xY"},"source":["def labels_clusters_globales (matriz_optimo_n_cluster_GD, Matriz):\n","\n","  all_global_labels = [] \n","\n","  for Cantidad_clusters in matriz_optimo_n_cluster_GD.N_Clusters: \n","    kmeanModel = KMeansConstrained(n_clusters = Cantidad_clusters, size_min = 30,init = 'k-means++')\n","    kmeanModel.fit(Matriz)\n","\n","    all_global_labels.append(kmeanModel.labels_)\n","\n","  return all_global_labels\n","\n","def columnas_labels_clusters_globales (Matriz, all_global_labels):\n","  \n","  n_puntos_total = []\n","\n","  for loop_clusters_globales in range(0,cantidad_globales):\n","      df['cluster_label Nro: ' + str(loop_clusters_globales)] = all_global_labels[loop_clusters_globales]        # Le agrego columnas al DF que tienen los labels de los clusters globales\n","\n","      n_puntos_temporal = []\n","\n","      for i in range(0,n_optimo_clusters.iloc[loop_clusters_globales]):\n","        n_puntos_temporal.append(len(df[df['cluster_label Nro: ' + str(loop_clusters_globales)].isin([i])]))\n","        \n","      n_puntos_total.append(n_puntos_temporal)\n","  \n","  return n_puntos_total, df\n","\n","def regresion_lineal_cantidad_optima_subclusters (n_puntos_total, loop_globales):\n","  \n","  variables = []\n","  soluciones_variables = []\n","\n","  solver = pywraplp.Solver.CreateSolver('CBC')\n","  \n","  # En este for local se corre dependiendo que tan largo es el vector de cluster global. Esto es importante para \n","  # poder sacar las condiciones de cada loop global\n","\n","  for u in range(0,len(n_puntos_total[loop_globales])):\n","    globals()['n_rutas_maximo_%s' % u] = n_puntos_total[loop_globales][u]/30\n","    globals()['n_rutas_minimo_%s' % u] = n_puntos_total[loop_globales][u]/60\n","    globals()['n_rutas_%s' % u] = solver.IntVar(0, solver.infinity(), 'n_rutas_' + str(u))\n","    solver.Add(globals()['n_rutas_%s' % u] <= globals()['n_rutas_maximo_%s' % u])\n","    solver.Add(globals()['n_rutas_%s' % u] >= globals()['n_rutas_minimo_%s' % u])\n","    variables.append(globals()['n_rutas_%s' % u])\n","\n","  # Cuando volvemos a este nivel ya se efectuaron todas las variables y condiciones para calcular el numero optimo \n","  # de drivers por cluster global\n","\n","  solver.Minimize(sum(variables))\n","  status = solver.Solve()\n","\n","  for i in range(0,len(variables)):\n","    soluciones_variables.append(variables[i].solution_value())\n","\n","  return soluciones_variables\n","\n","def matriz_subclusters_regresion_lineal(loop_globales, global_soluciones_variables):\n","\n","  # Este DF generado permite una lectura mas adelante de la cantidad optima de subclusters por numero de cluster global,\n","  # esta loopeado por la variable loop_globales para que este loop general se concentre primero en el loop global minimo\n","  # y que despues vaya analizandose de menor a mayor\n","\n","  subclusters_recomendados = pd.DataFrame({'Nro_Minimo_Ruta': global_soluciones_variables[loop_globales]})\n","\n","  subclusters_recomendados = subclusters_recomendados.Nro_Minimo_Ruta.astype('int')\n","  subclusters_recomendados = pd.DataFrame(subclusters_recomendados)\n","\n","  return subclusters_recomendados\n","\n","def labels_subclusters (Matriz, subclusters_recomendados, loop_globales):\n","  \n","  contador = 0\n","  compiled_matrix_subclusters = []\n","  inertia = []\n","\n","  for k in subclusters_recomendados.Nro_Minimo_Ruta:\n","    Matrix_subclusters = df[df[df.columns[loop_globales + 3]].isin([contador])]\n","    Matrix_subclusters_Latlon = Matrix_subclusters[Matrix_subclusters.columns[0:2]]\n","\n","    contador += 1\n","\n","    try:\n","      kmeanModel_subclusters = KMeansConstrained(n_clusters=k, size_min=30, size_max=60,init ='k-means++')\n","      kmeanModel_subclusters.fit(Matrix_subclusters_Latlon)\n","    except:\n","      kmeanModel_subclusters = KMeansConstrained(n_clusters=k, size_min=30, size_max=len(Matrix_subclusters),init ='k-means++')\n","      kmeanModel_subclusters.fit(Matrix_subclusters_Latlon)\n","    \n","    # display(Matrix_subclusters)\n","    # pdb.set_trace()\n","    Matrix_subclusters['sub_cluster_label'] = kmeanModel_subclusters.labels_\n","    # pdb.set_trace()\n","\n","    inertia.append(kmeanModel_subclusters.inertia_)  \n","\n","    compiled_matrix_subclusters.append(Matrix_subclusters)\n","\n","  compiled_matrix_subclusters = pd.concat(compiled_matrix_subclusters).reset_index(drop=True)\n","  compiled_matrix_subclusters['Cluster_Final'] = compiled_matrix_subclusters[compiled_matrix_subclusters.columns[loop_globales + 3]].astype(str) + compiled_matrix_subclusters[compiled_matrix_subclusters.columns[-1]].astype(str)\n","\n","  return compiled_matrix_subclusters, inertia, contador\n","\n","def mejor_matriz_del_cluster_global(all_inertias, all_matrix_subclusters):\n","\n","  for posicion_de_minima_inercia in range(0,len(all_inertias)):\n","    if (all_inertias[posicion_de_minima_inercia] == min(all_inertias)) == True:\n","      posicion_optima = posicion_de_minima_inercia\n","\n","  MATRIZ_GANADORA = all_matrix_subclusters[posicion_optima]\n","  INERCIA_MATRIZ_GANADORA = all_inertias[posicion_optima]\n","  \n","  return INERCIA_MATRIZ_GANADORA, MATRIZ_GANADORA\n","\n","def mejor_matriz_de_todas(INERCIA_MATRIZ_GANADORA_FINAL, MATRIZ_GANADORA_FINAL):\n","\n","  for posicion_de_minima_inercia_final in range(0,len(INERCIA_MATRIZ_GANADORA_FINAL)):\n","    if (INERCIA_MATRIZ_GANADORA_FINAL[posicion_de_minima_inercia_final] == min(INERCIA_MATRIZ_GANADORA_FINAL)) == True:\n","      posicion_optima_final = posicion_de_minima_inercia_final\n","      \n","  GANADOR = MATRIZ_GANADORA_FINAL[posicion_optima_final]\n","  \n","  return GANADOR"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s46JYHEKlEPw"},"source":["## Matriz Final"]},{"cell_type":"code","metadata":{"id":"k-PZ6C5ElDHJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637175512379,"user_tz":180,"elapsed":18260,"user":{"displayName":"Pedro Vallarino","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15125725779083024235"}},"outputId":"30858b2d-ada2-46cd-8040-d1bb18305aaa"},"source":["cantidad_de_clusters_globales = 5\n","cantidad_de_subclusters = 2\n","\n","if error_state == False:\n","\n","  MATRIZ_GANADORA_FINAL = []\n","  INERCIA_MATRIZ_GANADORA_FINAL = []\n","\n","  for cantidad_de_loops_globales in range(0,cantidad_de_clusters_globales):                                                    \n","                                                                                                                               \n","    all_global_labels = labels_clusters_globales(matriz_optimo_n_cluster_GD = matriz_optimo_n_cluster_GD, Matriz= Matrix)                         \n","                                                                                                                                                  \n","    n_puntos_total = columnas_labels_clusters_globales(Matriz= df, all_global_labels=all_global_labels)[0]\n","  \n","    df = columnas_labels_clusters_globales(Matriz= df, all_global_labels=all_global_labels)[1]\n","  \n","    all_inertias = []\n","    all_matrix_subclusters = []\n","  \n","    global_soluciones_variables = []\n","\n","    for loop_globales in range(0,len(df.columns) - 3):  \n","\n","      soluciones_variables = regresion_lineal_cantidad_optima_subclusters(n_puntos_total= n_puntos_total, loop_globales = loop_globales)\n","\n","      global_soluciones_variables.append(soluciones_variables)\n","\n","      subclusters_recomendados = matriz_subclusters_regresion_lineal(loop_globales = loop_globales, global_soluciones_variables = global_soluciones_variables)\n","\n","      compiled_matrix_subclusters = labels_subclusters(Matriz = df, subclusters_recomendados = subclusters_recomendados, loop_globales = loop_globales)[0]\n","      inertia = labels_subclusters(Matriz = df, subclusters_recomendados = subclusters_recomendados, loop_globales = loop_globales)[1]\n","\n","      all_inertias.append(sum(inertia)/len(inertia))\n","      all_matrix_subclusters.append(compiled_matrix_subclusters)\n","\n","    INERCIA_MATRIZ_GANADORA = mejor_matriz_del_cluster_global(all_inertias = all_inertias, all_matrix_subclusters = all_matrix_subclusters)[0]\n","    MATRIZ_GANADORA = mejor_matriz_del_cluster_global(all_inertias = all_inertias, all_matrix_subclusters = all_matrix_subclusters)[1]\n","\n","    INERCIA_MATRIZ_GANADORA_FINAL.append(INERCIA_MATRIZ_GANADORA)\n","    MATRIZ_GANADORA_FINAL.append(MATRIZ_GANADORA)\n","\n","  GANADOR = mejor_matriz_de_todas(INERCIA_MATRIZ_GANADORA_FINAL = INERCIA_MATRIZ_GANADORA_FINAL, MATRIZ_GANADORA_FINAL = MATRIZ_GANADORA_FINAL)\n","\n","else: \n","  print('No hay suficiente informacion')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:92: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":408},"id":"8sx8-YuXDI1T","executionInfo":{"status":"ok","timestamp":1637088009779,"user_tz":180,"elapsed":396,"user":{"displayName":"Pedro Vallarino","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15125725779083024235"}},"outputId":"9995babc-3dce-403b-983f-9daa159713a3"},"source":["GANADOR"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>lon</th>\n","      <th>lat</th>\n","      <th>type</th>\n","      <th>cluster_label Nro: 0</th>\n","      <th>cluster_label Nro: 1</th>\n","      <th>cluster_label Nro: 2</th>\n","      <th>cluster_label Nro: 3</th>\n","      <th>sub_cluster_label</th>\n","      <th>Cluster_Final</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-58.103986</td>\n","      <td>-34.868661</td>\n","      <td>delivery</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>00</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-58.104330</td>\n","      <td>-34.870770</td>\n","      <td>delivery</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>00</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-58.112740</td>\n","      <td>-34.871452</td>\n","      <td>delivery</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>00</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-58.127686</td>\n","      <td>-34.887093</td>\n","      <td>delivery</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>00</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-58.069396</td>\n","      <td>-34.901736</td>\n","      <td>delivery</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>00</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>495</th>\n","      <td>-57.951021</td>\n","      <td>-34.920153</td>\n","      <td>delivery</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>80</td>\n","    </tr>\n","    <tr>\n","      <th>496</th>\n","      <td>-57.952219</td>\n","      <td>-34.921400</td>\n","      <td>delivery</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>80</td>\n","    </tr>\n","    <tr>\n","      <th>497</th>\n","      <td>-57.943400</td>\n","      <td>-34.921510</td>\n","      <td>pickup</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>80</td>\n","    </tr>\n","    <tr>\n","      <th>498</th>\n","      <td>-57.947260</td>\n","      <td>-34.924240</td>\n","      <td>delivery</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>80</td>\n","    </tr>\n","    <tr>\n","      <th>499</th>\n","      <td>-57.948338</td>\n","      <td>-34.921834</td>\n","      <td>delivery</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>80</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>500 rows × 9 columns</p>\n","</div>"],"text/plain":["           lon        lat  ... sub_cluster_label  Cluster_Final\n","0   -58.103986 -34.868661  ...                 0             00\n","1   -58.104330 -34.870770  ...                 0             00\n","2   -58.112740 -34.871452  ...                 0             00\n","3   -58.127686 -34.887093  ...                 0             00\n","4   -58.069396 -34.901736  ...                 0             00\n","..         ...        ...  ...               ...            ...\n","495 -57.951021 -34.920153  ...                 0             80\n","496 -57.952219 -34.921400  ...                 0             80\n","497 -57.943400 -34.921510  ...                 0             80\n","498 -57.947260 -34.924240  ...                 0             80\n","499 -57.948338 -34.921834  ...                 0             80\n","\n","[500 rows x 9 columns]"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"XOEsmecpze7R"},"source":["### Exportando el Archivo terminado"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"TRZlGHM5xiYL","executionInfo":{"status":"ok","timestamp":1637175513273,"user_tz":180,"elapsed":15,"user":{"displayName":"Pedro Vallarino","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15125725779083024235"}},"outputId":"60207d7d-34b1-4244-fbae-508377cf6b58"},"source":["GANADOR.to_csv(\"Puntos clusterizados.csv\")\n","from google.colab import files\n","files.download(\"Puntos clusterizados.csv\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_cdd8a673-8abd-4b60-b035-a58efd5a51f8\", \"Puntos clusterizados.csv\", 29222)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"HMpWvrBkEtgn"},"source":["### Importando el archivo terminado (para saltear todo lo de arriba)"]},{"cell_type":"code","metadata":{"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":37},"id":"ykXqrrupE20O","executionInfo":{"status":"ok","timestamp":1637183393756,"user_tz":180,"elapsed":3115,"user":{"displayName":"Pedro Vallarino","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15125725779083024235"}},"outputId":"6ce5b82c-e6dd-4ac4-e0a8-115c3d4b53aa"},"source":["from google.colab import files\n","uploaded = files.upload()\n","GANADOR = pd.read_csv('Puntos clusterizados.csv')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-7f56ee98-2688-4320-8cd9-788df661ba29\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-7f56ee98-2688-4320-8cd9-788df661ba29\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"zSzYzrbXhLJ_"},"source":["### Sistema de competencia de clusters con densidad\n","\n","**Mejora posible:**\n","Lo voy a hacer con analisis de densidad pero se podria hacer mas cheto usando Silhouette score. El gran problema es que para calcular el silhouette score se complica cuando hago subclusters no se cual es el mas cercano."]},{"cell_type":"markdown","metadata":{"id":"GVAdQyEdBv4F"},"source":["# Funciones: Routing_Data"]},{"cell_type":"code","metadata":{"id":"5zbs-TJ-BxTd"},"source":["# FUNCTIONS ROUTING DATA -----------------------------------------------------------------------\n","\n","def create_data_model():\n","      \"\"\"Stores the data for the problem.\"\"\"\n","      data = {}\n","      # Locations in block units\n","      locations = vector*1000\n","      \n","      # Convert locations in meters using a city block dimension of 114m x 80m.\n","      data['locations'] = [(l[0] * 114, l[1] * 80) for l in locations]\n","      data['num_vehicles'] = 1\n","      data['depot'] = 0\n","      return data\n","\n","def create_distance_callback(data, manager):\n","    \"\"\"Creates callback to return distance between points.\"\"\"\n","    distances_ = {}\n","    index_manager_ = manager\n","\n","    for from_counter, from_node in enumerate(data['locations']):\n","        distances_[from_counter] = {}\n","        for to_counter, to_node in enumerate(data['locations']):\n","            if from_counter == to_counter:\n","                distances_[from_counter][to_counter] = 0\n","            else:\n","                distances_[from_counter][to_counter] = (\n","                    abs(from_node[0] - to_node[0]) +\n","                    abs(from_node[1] - to_node[1]))\n","\n","    def distance_callback(from_index, to_index):\n","        \"\"\"Returns the manhattan distance between the two nodes.\"\"\"\n","        # Convert from routing variable Index to distance matrix NodeIndex.\n","        from_node = index_manager_.IndexToNode(from_index)\n","        to_node = index_manager_.IndexToNode(to_index)\n","        return distances_[from_node][to_node]\n","\n","    return distance_callback\n","\n","def print_solution(manager, routing, assignment):\n","    \"\"\"Prints assignment on console.\"\"\"\n","    print('Objective: {}'.format(assignment.ObjectiveValue()))\n","    index = routing.Start(0)\n","    plan_output = 'Route for vehicle 0:\\n'\n","    route_distance = 0\n","    while not routing.IsEnd(index):\n","        plan_output += ' {} ->'.format(manager.IndexToNode(index))\n","        previous_index = index\n","        index = assignment.Value(routing.NextVar(index))\n","        route_distance += routing.GetArcCostForVehicle(previous_index, index, 0)\n","    plan_output += ' {}\\n'.format(manager.IndexToNode(index))\n","    plan_output += 'Distance of the route: {}m\\n'.format(route_distance)\n","    print(plan_output)\n","\n","# FUNCTIONS MATRIZ BUILD -----------------------------------------------------------------------\n","\n","def agregar_loc_depo (GANADOR):\n","  \n","  GPS_Depo_BSAS = pd.DataFrame({'lon': [-58.475659003352604] ,'lat': [-34.59218229539661] , \n","                 'type': ['depo_bsas'], 'Cluster_Final': [999]}) \n","  \n","  GANADOR = GANADOR[['lon','lat','type','Cluster_Final']]\n","\n","  GANADOR_CON_DEPO = []\n","\n","  GANADOR_CON_DEPO.append(GPS_Depo_BSAS)\n","  GANADOR_CON_DEPO.append(GANADOR)\n","\n","  GANADOR_CON_DEPO = pd.concat(GANADOR_CON_DEPO).reset_index(drop=True)\n","\n","  return GANADOR_CON_DEPO\n","\n","def calculos_google():\n","  \n","  data = create_data_model()\n","\n","  manager = pywrapcp.RoutingIndexManager(len(data['locations']),\n","                                        data['num_vehicles'], data['depot'])\n","  routing = pywrapcp.RoutingModel(manager)\n","\n","  distance_callback = create_distance_callback(data, manager)\n","  transit_callback_index = routing.RegisterTransitCallback(distance_callback)\n","\n","  routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)\n","\n","  search_parameters = pywrapcp.DefaultRoutingSearchParameters()\n","  search_parameters.first_solution_strategy = (\n","      routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)\n","\n","  assignment = routing.SolveWithParameters(search_parameters)\n","\n","  todas_las_distancias = []\n","  orden_de_las_rutas_salida  = []\n","\n","  if assignment:\n","    \"\"\"Prints assignment on console.\"\"\"\n","    index = routing.Start(0)\n","    plan_output = 'Route for vehicle 0:\\n'\n","    route_distance = 0\n","    orden_de_las_rutas_salida.append(index)  \n","    \n","    while not routing.IsEnd(index):\n","      plan_output += ' {} ->'.format(manager.IndexToNode(index))\n","      previous_index = index\n","      index = assignment.Value(routing.NextVar(index))\n","      route_distance += routing.GetArcCostForVehicle(previous_index, index, 0)\n","      \n","      try:\n","        todas_las_distancias.append(geopy.distance.great_circle(vector[previous_index,:], vector[index,:])*1000)\n","        orden_de_las_rutas_salida.append(index)\n","\n","      except:\n","        todas_las_distancias.append(geopy.distance.great_circle(vector[previous_index,:], vector[0,:])*1000)\n","    \n","    plan_output += ' {}\\n'.format(manager.IndexToNode(index))\n","    plan_output += 'Distance of the route: {}m\\n'.format(route_distance)\n","\n","  distancia_nula = geopy.distance.great_circle(vector[0,:], vector[0,:])\n","  suma = distancia_nula\n","  for i in range(0,len(todas_las_distancias)):\n","    suma = suma + todas_las_distancias[i] \n","  \n","  puntos_y_distancias = pd.DataFrame({'Punto de Salida': orden_de_las_rutas_salida, 'Distancias': todas_las_distancias})\n","\n","  lon_salida = []\n","  lat_salida = []\n","\n","  for x in range(0,len(puntos_y_distancias)):\n","    lon_salida.append(prueba_routing.lon[puntos_y_distancias['Punto de Salida'][x]]) \n","    lat_salida.append(prueba_routing.lat[puntos_y_distancias['Punto de Salida'][x]])\n","\n","  puntos_y_distancias['lon_salida'] = lon_salida\n","  puntos_y_distancias['lat_salida'] = lat_salida\n","  puntos_y_distancias['Cluster_Final'] = clusters\n","  puntos_y_distancias = puntos_y_distancias.iloc[1: , :]   \n","  puntos_y_distancias = puntos_y_distancias.reset_index(drop=False)\n","  puntos_y_distancias.rename(columns = {'index': 'Travel_Index'}, inplace = True)\n","\n","  return puntos_y_distancias"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yPVLWHnGPPMR"},"source":["# Routing_Data\n"]},{"cell_type":"code","metadata":{"id":"Pm8ptRY5PQe1"},"source":["rutas = []\n","\n","GANADOR_CON_DEPO = agregar_loc_depo(GANADOR = GANADOR)\n","\n","for clusters in GANADOR.Cluster_Final.unique():\n","\n","  prueba_routing = GANADOR_CON_DEPO.loc[GANADOR_CON_DEPO['Cluster_Final'].isin([str(clusters),999])]\n","  prueba_routing = prueba_routing.reset_index(drop = True)\n","  vector = prueba_routing.loc[:,[\"lon\",\"lat\"]].to_numpy()\n","\n","  # Inicio creado del modelo ---\n","  puntos_y_distancias = calculos_google()\n","  # Final del modelo de datos\n","  \n","  rutas.append(puntos_y_distancias)\n","\n","RUTAS_FINAL = pd.concat(rutas)  "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":930},"id":"zkj2oDyPL2Ur","executionInfo":{"status":"error","timestamp":1637183528154,"user_tz":180,"elapsed":5527,"user":{"displayName":"Pedro Vallarino","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15125725779083024235"}},"outputId":"2b43b056-3fcc-46d3-f9f3-f09cc1b7d0be"},"source":["rutas = []\n","\n","pickup_state = 0\n","\n","import pdb\n","\n","GANADOR_CON_DEPO = agregar_loc_depo(GANADOR = GANADOR)\n","\n","for clusters in GANADOR.Cluster_Final.unique():\n","\n","  prueba_routing = GANADOR_CON_DEPO.loc[GANADOR_CON_DEPO['Cluster_Final'].isin([str(clusters),999])]\n","\n","  #taggear si es pickup o delivery\n","  if any(prueba_routing.type == 'pickup') == True:\n","    pickup_state = True\n","  else:\n","    pickup_state = False\n","\n","  print(prueba_routing.type, 'pickup_state:', pickup_state)\n","  pdb.set_trace()\n","\n","#   prueba_routing = prueba_routing.reset_index(drop = True)\n","#   vector = prueba_routing.loc[:,[\"lon\",\"lat\"]].to_numpy()\n","\n","#   # Inicio creado del modelo ---\n","#   data = create_data_model()\n","\n","#   manager = pywrapcp.RoutingIndexManager(len(data['locations']),\n","#                                         data['num_vehicles'], data['depot'])\n","#   routing = pywrapcp.RoutingModel(manager)\n","\n","#   distance_callback = create_distance_callback(data, manager)\n","#   transit_callback_index = routing.RegisterTransitCallback(distance_callback)\n","\n","#   routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)\n","\n","#   search_parameters = pywrapcp.DefaultRoutingSearchParameters()\n","#   search_parameters.first_solution_strategy = (\n","#       routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)\n","\n","#   assignment = routing.SolveWithParameters(search_parameters)\n","\n","#   todas_las_distancias = []\n","#   orden_de_las_rutas_salida  = []\n","\n","#   if assignment:\n","#     \"\"\"Prints assignment on console.\"\"\"\n","#     index = routing.Start(0)\n","#     plan_output = 'Route for vehicle 0:\\n'\n","#     route_distance = 0\n","#     orden_de_las_rutas_salida.append(index)  \n","    \n","#     while not routing.IsEnd(index):\n","#       plan_output += ' {} ->'.format(manager.IndexToNode(index))\n","#       previous_index = index\n","#       index = assignment.Value(routing.NextVar(index))\n","#       route_distance += routing.GetArcCostForVehicle(previous_index, index, 0)\n","      \n","#       try:\n","#         todas_las_distancias.append(geopy.distance.great_circle(vector[previous_index,:], vector[index,:])*1000)\n","#         orden_de_las_rutas_salida.append(index)\n","\n","#       except:\n","#         todas_las_distancias.append(geopy.distance.great_circle(vector[previous_index,:], vector[0,:])*1000)\n","    \n","#     plan_output += ' {}\\n'.format(manager.IndexToNode(index))\n","#     plan_output += 'Distance of the route: {}m\\n'.format(route_distance)\n","\n","#   distancia_nula = geopy.distance.great_circle(vector[0,:], vector[0,:])\n","#   suma = distancia_nula\n","#   for i in range(0,len(todas_las_distancias)):\n","#     suma = suma + todas_las_distancias[i] \n","\n","#   puntos_y_distancias = pd.DataFrame({'Punto de Salida': orden_de_las_rutas_salida, 'Distancias': todas_las_distancias})\n","\n","#   lon_salida = []\n","#   lat_salida = []\n","\n","#   for x in range(0,len(puntos_y_distancias)):\n","#     lon_salida.append(prueba_routing.lon[puntos_y_distancias['Punto de Salida'][x]]) \n","#     lat_salida.append(prueba_routing.lat[puntos_y_distancias['Punto de Salida'][x]])\n","\n","#   puntos_y_distancias['lon_salida'] = lon_salida\n","#   puntos_y_distancias['lat_salida'] = lat_salida\n","#   puntos_y_distancias['Cluster_Final'] = clusters\n","#   puntos_y_distancias = puntos_y_distancias.iloc[1: , :]   \n","#   puntos_y_distancias = puntos_y_distancias.reset_index(drop=False)\n","#   puntos_y_distancias.rename(columns = {'index': 'Travel_Index'}, inplace = True)\n","#   # Final del modelo de datos\n","  \n","#   rutas.append(puntos_y_distancias)\n","\n","# RUTAS_FINAL = pd.concat(rutas)  "],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["0     depo_bsas\n","1        pickup\n","2        pickup\n","3        pickup\n","7      delivery\n","8      delivery\n","9      delivery\n","10     delivery\n","11     delivery\n","12     delivery\n","13     delivery\n","14     delivery\n","15     delivery\n","16     delivery\n","17     delivery\n","18       pickup\n","19     delivery\n","20     delivery\n","21     delivery\n","22       pickup\n","23     delivery\n","24     delivery\n","25     delivery\n","26     delivery\n","27     delivery\n","28     delivery\n","29     delivery\n","30     delivery\n","31     delivery\n","32     delivery\n","33     delivery\n","Name: type, dtype: object pickup_state: True\n","> <ipython-input-9-9ec131d5c8eb>(9)<module>()\n","-> for clusters in GANADOR.Cluster_Final.unique():\n","(Pdb) q\n"]},{"output_type":"error","ename":"BdbQuit","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mBdbQuit\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-9ec131d5c8eb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mGANADOR_CON_DEPO\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0magregar_loc_depo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mGANADOR\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGANADOR\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mclusters\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mGANADOR\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCluster_Final\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0mprueba_routing\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGANADOR_CON_DEPO\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mGANADOR_CON_DEPO\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Cluster_Final'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclusters\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m999\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-9-9ec131d5c8eb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mGANADOR_CON_DEPO\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0magregar_loc_depo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mGANADOR\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGANADOR\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mclusters\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mGANADOR\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCluster_Final\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0mprueba_routing\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGANADOR_CON_DEPO\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mGANADOR_CON_DEPO\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Cluster_Final'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclusters\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m999\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/bdb.py\u001b[0m in \u001b[0;36mtrace_dispatch\u001b[0;34m(self, frame, event, arg)\u001b[0m\n\u001b[1;32m     86\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;31m# None\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mevent\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'line'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 88\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     89\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mevent\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'call'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/bdb.py\u001b[0m in \u001b[0;36mdispatch_line\u001b[0;34m(self, frame)\u001b[0m\n\u001b[1;32m    111\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_here\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbreak_here\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muser_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquitting\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mraise\u001b[0m \u001b[0mBdbQuit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrace_dispatch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mBdbQuit\u001b[0m: "]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W4VLKJ-4k_GS","executionInfo":{"status":"ok","timestamp":1637183235186,"user_tz":180,"elapsed":384,"user":{"displayName":"Pedro Vallarino","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15125725779083024235"}},"outputId":"59a51fa9-ca70-475d-cb44-182116d45183"},"source":["any(prueba_routing.type == 'pickup')\n","#any(k == 'pickup')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","metadata":{"id":"8GEWrCGqIZdS"},"source":["RUTAS_FINAL.to_csv(\"RUTAS_FINAL.csv\")\n","from google.colab import files\n","files.download(\"RUTAS_FINAL.csv\")"],"execution_count":null,"outputs":[]}]}